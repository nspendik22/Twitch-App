{"version":3,"sources":["Suggestions.js","App.js","serviceWorker.js","index.js"],"names":["Suggestions","props","options","results","sort","a","b","followers","map","r","react_default","createElement","key","id","className","onClick","window","location","href","url","src","concat","logo","display_name","library","add","faSearch","URL","headers","Headers","append","App","state","query","streams","getInfo","axios","get","_this","Accept","Client-ID","then","_ref","data","setState","channels","console","log","handleInputChange","search","value","length","_this2","this","fetch","result","json","_this3","type","name","placeholder","ref","input","onChange","react_fontawesome_index_es","icon","src_Suggestions","channel","res","preview","medium","status","substring","game","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf889735.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\nimport { faYenSign } from '@fortawesome/free-solid-svg-icons';\n\n\n\nconst Suggestions = (props) => {\n\n  const options = props.results\n  \n  .sort((a, b) => b.followers - a.followers)\n  \n  .map(r => (\n    <li key={r.id} className=\"listing\" onClick={ function onClick(){\n        window.location.href=r.url;\n    }}>\n        <div className=\"image-wrapper\"><img src={`${r.logo}`}/></div>\n        <div className=\"info\"><span>{r.display_name}</span></div>\n    </li>\n  ))\n  return <ul className=\"users\">{options}</ul>\n}\n\nexport default Suggestions","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Suggestions from './Suggestions';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\n\nlibrary.add(faSearch)\n\n//const URL = 'https://api.twitch.tv/helix/users';\nconst URL = 'https://api.twitch.tv/kraken/search/channels';\nlet headers = new Headers();\nheaders.append('Accept', 'application/vnd.twitchtv.v5+json');\nheaders.append('Client-ID', 'ut67uxo8b0gr6hs2f0cyu596di1lcg');\n\n\n\nclass App extends Component {\n  \nstate = {\n  query: '',\n  results: [],\n  streams: [],\n}\n\ncomponentDidMount(){\n  fetch('https://api.twitch.tv/kraken/streams?limit=12', { headers: { 'Accept' : 'application/vnd.twitchtv.v5+json', 'Client-ID': 'ut67uxo8b0gr6hs2f0cyu596di1lcg' } })\n  .then(result => result.json())\n  .then(data => {this.setState({streams: data.streams});console.log(this.state.streams);});\n  \n} \n\ngetInfo = () => {\n  //axios.get(`${URL}?login=${this.state.query}`, { headers: { 'Client-ID': 'ut67uxo8b0gr6hs2f0cyu596di1lcg' } })\n  axios.get(`${URL}?query=${this.state.query}&limit=5`, { headers: { 'Accept' : 'application/vnd.twitchtv.v5+json', 'Client-ID': 'ut67uxo8b0gr6hs2f0cyu596di1lcg' } })\n    .then(({ data }) => {\n      this.setState({\n        results: data.channels\n      })\n      console.log(this.state.results);\n    })\n}\n\n\n\nhandleInputChange = () => {\n  this.setState({\n    query: this.search.value\n  }, () => {\n    if (this.state.query && this.state.query.length > 1) {\n      /*if (this.state.query.length % 2 === 0) {*/\n        this.getInfo()\n      /*}*/\n    } else if (!this.state.query) {\n     \n    }\n  })\n}\n\n  render() {\n    const { streams } = this.state;\n    return (\n      <div className=\"App\">\n      <h1>Twitch React App</h1>\n      <div className=\"wrapper\">\n        <input type=\"text\" name=\"\" className=\"search-txt\" placeholder=\"Search for Channels...\" ref={input => this.search = input}\n          onChange={this.handleInputChange}/>\n        \n        <a className=\"search-btn\">\n        <FontAwesomeIcon icon=\"search\" />\n        </a>\n        <Suggestions results={this.state.results} />\n        \n      </div>\n      \n      <div className=\"streams\">\n        <div className=\"subheading\"><h3>You may be interested in some of these live streams</h3></div>\n          <div className=\"streams-wrapper\">\n            {streams\n            .sort((a, b) => b.channel.followers - a.channel.followers)\n              .map(res => (\n                  <div className=\"stream-card\">\n                    <a href={res.channel.url}>\n                    <div className=\"stream-thumbnail\">\n                      <img src={res.preview.medium}/>\n                    </div>\n                    <div className=\"stream-info\">\n                      <div className=\"image-wrapper\"><img src={`${res.channel.logo}`}/></div>\n                      \n                      <div className=\"card-info\">\n                        <a className=\"stream-title\">{`${res.channel.status.substring(0,35)+'...'}`}</a>\n                        <div className=\"subtitle\">\n                          <div className=\"card-subtitle-user\">\n                            <a className=\"stream-user\">{res.channel.display_name}</a>\n                          </div>\n                          <div className=\"card-subtitle-user\">\n                            <a className=\"stream-game\">{res.channel.game}</a>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    </a>\n                  </div>\n              ))\n            \n            }\n          </div>\n          \n\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}